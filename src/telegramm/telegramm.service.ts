import { Command, Hears, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';

import axios from 'axios';

import { actionButtons } from './buttons/actions.button';
import { Context } from './interfaces/context.interface';
import { helpList } from './utils/show-help-list.utils';

@Update()
export class TelegrammService {
  constructor(@InjectBot() private readonly bot: Telegraf<Context>) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç üëã, ${ctx.message.from.first_name}\n`);
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('üÜò Help')
  async helpHears(ctx: Context) {
    await this.helpCommand(ctx);
  }

  @Hears('üå§ Weather')
  async weatherHears(ctx: Context) {
    await ctx.reply('–ï—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ(');
  }

  @Hears('üê± Cat')
  async catHears(ctx: Context) {
    await this.catCommand(ctx);
  }

  @Hears('üê∂ Dog')
  async dogHears(ctx: Context) {
    await this.dogCommand(ctx);
  }

  @Command('help')
  async helpCommand(ctx: Context) {
    await ctx.reply(helpList());
  }

  @Command('dog')
  async dogCommand(ctx: Context) {
    const { data } = await axios.get(process.env.DOG_URL);

    await this.bot.telegram.sendPhoto(ctx.message.chat.id, data.url);
  }

  @Command('cat')
  async catCommand(ctx: Context) {
    const { data } = await axios.get(process.env.CAT_URL);

    await this.bot.telegram.sendPhoto(ctx.message.chat.id, data[0].url);
  }
}
